// Code generated by go generate; DO NOT EDIT.
package models

import (
	"github.com/gofrs/uuid"
	"gorm.io/gorm"
)

var constructors map[string]func() interface{} = map[string]func() interface{}{
{{- range .}}
    {{- if not .Abstract}}
	"{{.Entity}}": func() interface{} { return &{{.Entity}}{} },
	{{- end}}
{{- end}}
}

{{- range .}}
{{if not .Abstract}}
// {{.Entity}} -----------------------------------------------------------------
type {{.Entity}} struct {
	{{- if .ExtendBase}}
	Base BaseModel `gorm:"embedded" parentTypes:"{{if .Parents}}{{range .Parents}}{{.}},{{end}}{{end}}"`
	{{- end}}
	{{- $numOfFields := len .NormalizedFields}} {{if gt $numOfFields 0}}

	// normalized fields
	{{- end}}
	{{- range .NormalizedFields}}
	{{.Field}} {{.FieldType}} `gorm:"column:{{.ColumnName}}"`	
	{{- end}}
	{{- $numOfRelations := len .Relationships}} {{if gt $numOfRelations 0}}

	// relationships
	{{- end}}
	{{- range .Relationships}}
	{{.FieldName}} []{{.Entity}} `gorm:"many2many:{{.MappingTable}}"`
	{{- end}}
}

// BaseModel returns the reference to the base model
func (entity *{{.Entity}}) BaseModel() *BaseModel {
	return &entity.Base
}

// Find entities that meets certain conditions
func (entity *{{.Entity}}) Find(db *gorm.DB, conds ...interface{}) ([]Entity, error) {
	var entities []{{.Entity}}
	return findEntity(db, &entities, conds...)
}

// BeforeCreate to validate and set default
func (entity *{{.Entity}}) BeforeCreate(tx *gorm.DB) error {
	return entity.Base.preCreate(tx, entity)
}

{{- end}}
{{- end}}

